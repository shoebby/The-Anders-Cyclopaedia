//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""world"",
            ""id"": ""ab227bfd-4eda-44de-b808-f8e2d0d56ded"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""f890c089-c20e-4639-90c2-64c5da7296b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""interact mode toggle"",
                    ""type"": ""Button"",
                    ""id"": ""3c64d17a-44c7-4366-b2c8-da0d17735fb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""panel left"",
                    ""type"": ""Button"",
                    ""id"": ""c2911860-bf77-4d9d-b593-3e443d9b76c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""panel right"",
                    ""type"": ""Button"",
                    ""id"": ""72d01a39-0a65-40b3-8799-fd5d0215676d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""confirm"",
                    ""type"": ""Button"",
                    ""id"": ""e8ceb7df-6bd1-4d0b-9f2a-6f04fcadb9c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cancel"",
                    ""type"": ""Button"",
                    ""id"": ""246d2817-b1ae-4893-b99e-e3d097ce79cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""435ce6b4-7f5a-40d3-a603-66e39c531029"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""38faa7db-4ad8-46fb-8451-b956c70e21b5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0a9af86a-c43f-4075-a7f5-d928778c412a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a25aa7c8-3371-41a3-89b0-7d7881864fb3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f4ce2cb6-e932-4a82-ba79-133fe43c2037"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4b478b5e-d4e1-4751-9f3e-70a45bf1ae66"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4ca8bf43-e8eb-4515-bbdb-bec3572b3b7c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""interact mode toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""affcebea-b392-4125-a1cf-fc53efeef627"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""interact mode toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80a849d4-fab6-4fb0-b92b-40bf550e01b2"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""panel left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4aaf9d7-36e1-40f3-b710-bfabdeacda03"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""panel right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f49241f2-e5a3-411d-b9bb-9dfd9dfab4a4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57191bfd-5c21-40fa-b2ef-04ab73538a2f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // world
        m_world = asset.FindActionMap("world", throwIfNotFound: true);
        m_world_move = m_world.FindAction("move", throwIfNotFound: true);
        m_world_interactmodetoggle = m_world.FindAction("interact mode toggle", throwIfNotFound: true);
        m_world_panelleft = m_world.FindAction("panel left", throwIfNotFound: true);
        m_world_panelright = m_world.FindAction("panel right", throwIfNotFound: true);
        m_world_confirm = m_world.FindAction("confirm", throwIfNotFound: true);
        m_world_cancel = m_world.FindAction("cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // world
    private readonly InputActionMap m_world;
    private List<IWorldActions> m_WorldActionsCallbackInterfaces = new List<IWorldActions>();
    private readonly InputAction m_world_move;
    private readonly InputAction m_world_interactmodetoggle;
    private readonly InputAction m_world_panelleft;
    private readonly InputAction m_world_panelright;
    private readonly InputAction m_world_confirm;
    private readonly InputAction m_world_cancel;
    public struct WorldActions
    {
        private @Controls m_Wrapper;
        public WorldActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_world_move;
        public InputAction @interactmodetoggle => m_Wrapper.m_world_interactmodetoggle;
        public InputAction @panelleft => m_Wrapper.m_world_panelleft;
        public InputAction @panelright => m_Wrapper.m_world_panelright;
        public InputAction @confirm => m_Wrapper.m_world_confirm;
        public InputAction @cancel => m_Wrapper.m_world_cancel;
        public InputActionMap Get() { return m_Wrapper.m_world; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldActions set) { return set.Get(); }
        public void AddCallbacks(IWorldActions instance)
        {
            if (instance == null || m_Wrapper.m_WorldActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WorldActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @interactmodetoggle.started += instance.OnInteractmodetoggle;
            @interactmodetoggle.performed += instance.OnInteractmodetoggle;
            @interactmodetoggle.canceled += instance.OnInteractmodetoggle;
            @panelleft.started += instance.OnPanelleft;
            @panelleft.performed += instance.OnPanelleft;
            @panelleft.canceled += instance.OnPanelleft;
            @panelright.started += instance.OnPanelright;
            @panelright.performed += instance.OnPanelright;
            @panelright.canceled += instance.OnPanelright;
            @confirm.started += instance.OnConfirm;
            @confirm.performed += instance.OnConfirm;
            @confirm.canceled += instance.OnConfirm;
            @cancel.started += instance.OnCancel;
            @cancel.performed += instance.OnCancel;
            @cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IWorldActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @interactmodetoggle.started -= instance.OnInteractmodetoggle;
            @interactmodetoggle.performed -= instance.OnInteractmodetoggle;
            @interactmodetoggle.canceled -= instance.OnInteractmodetoggle;
            @panelleft.started -= instance.OnPanelleft;
            @panelleft.performed -= instance.OnPanelleft;
            @panelleft.canceled -= instance.OnPanelleft;
            @panelright.started -= instance.OnPanelright;
            @panelright.performed -= instance.OnPanelright;
            @panelright.canceled -= instance.OnPanelright;
            @confirm.started -= instance.OnConfirm;
            @confirm.performed -= instance.OnConfirm;
            @confirm.canceled -= instance.OnConfirm;
            @cancel.started -= instance.OnCancel;
            @cancel.performed -= instance.OnCancel;
            @cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IWorldActions instance)
        {
            if (m_Wrapper.m_WorldActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWorldActions instance)
        {
            foreach (var item in m_Wrapper.m_WorldActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WorldActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WorldActions @world => new WorldActions(this);
    public interface IWorldActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteractmodetoggle(InputAction.CallbackContext context);
        void OnPanelleft(InputAction.CallbackContext context);
        void OnPanelright(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
